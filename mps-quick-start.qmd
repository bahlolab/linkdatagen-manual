# MPS quick start {#sec-mps-quick-start}

::: callout-warning
## Work in progress

This manual is a work in progress. Until it is complete, please continue using LINKDATAGEN from <https://bioinf.wehi.edu.au/software/linkdatagen/>.
:::

This chapter written by Katherine Smith and updated by Rick Tankard, with help from Thomas Scerri.

::: callout-note
The commands listed here are examples. You will need to modify filenames and options according to your circumstances. Please consult the @sec-linkdatagenpl and @sec-vcf2linkdatagenpl documentation for a detailed description of options available.
:::

::: callout-note
The following commands assume the bash shell (or similar, such as zsh) is being used. This is usually the default on Linux.
:::

## Downloading scripts and annotations

Download `linkdatagen.pl` and `vcf2linkdatagen.pl` according to the instructions in @sec-download.

Before you begin with `vcf2linkdatagen.pl`, decide which HapMap population you want to use to obtain population allele frequencies for linkage analysis, then choose the appropriate annotation (HapMap II or HapMap III). The eleven populations available have the codes ASW, CEU, CHB, CHD, GIH, JPT, LWK, MEX, MKK, TSI and YRI. Most populations only have frequencies available for the HapMap III annotation. CHB, CEU, JPT and YRI frequencies are available for both annotations, but the HapMap II annotation is recommended for theses populations as this contains more markers than HapMap III. See @sec-choosingPopulation for recommendations on choosing a population. For the rest of this example, we will use the HapMap II annotation and specify CEU population allele frequencies.

Download HapMap Phase II and/or HapMap Phase III files relevant to your genome build. These are provided in a .tar.gz file. TODO: Bundle annotations in a .tar.gz file.

-   hg38 (GRch38)
    -   Hapmap Phase II:
        -   annotHapMap2U_hg38.txt.gz
        -   annotHapMap2U_hg38.dbsnp_138.vcf
        -   annotHapMap2U_hg38.dbsnp_138.vcf.idx
    -   HapMap Phase III:
        -   annotHapMap3U_hg38.txt.gz
        -   annotHapMap3U_hg38.dbsnp_138.vcf
        -   annotHapMap3U_hg38.dbsnp_138.vcf.idx
-   hg19 (GRch37)
    -   Hapmap Phase II:
        -   annotHapMap2U_hg19.txt.gz
        -   annotHapMap2U_hg19.dbsnp_138.vcf
        -   annotHapMap2U_hg19.dbsnp_138.vcf.idx
    -   HapMap Phase III:
        -   annotHapMap3U_hg19.txt.gz
        -   annotHapMap3U_hg19.dbsnp_138.vcf
        -   annotHapMap3U_hg19.dbsnp_138.vcf.idx

TODO: change annotation file names for hg19 to include "hg19", as above.

Genotyping should be performed with GATK HaplotypeCaller (SAMtools mpileup and GATK UnifiedGenotyper are supported but not recommended, see the manual at [r997](https://github.com/bahlolab/linkdatagen/releases/tag/r997) for use of these tools).

Create an Analysis-Ready Reads BAM file according to the [Data pre-processing for variant discovery](https://gatk.broadinstitute.org/hc/en-us/articles/360035535912-Data-pre-processing-for-variant-discovery) pipeline to hg38 or hg19. The choice of aligner should not matter too much, though we have only tested the use of BWA MEM and Bowtie2.

Vcf2linkdatagen.pl assumes that chromosomes are named chr1, chr2, ... chrX rather than 1,2,...,X. (TODO: this may no longer be the case - I think I saw that "chr" is optional in the regex)

Genotype your samples with GATK.

Run the following GATK command on each sample:

    # Change these parameters according to your situation
    LINKDATAGEN_annotation=<annotation_directory>
    genome=hg38
    hapmapvcf="$LINKDATAGEN_annotation/annotHapMap2U_hg38.dbsnp_138.vcf"
    FASTA=/path/to/reference/Homo_sapiens_assembly38.fasta
    bam=<input_bam_file_path>
    outgvcf=gvcf/<sample_name>.g.vcf.gz

    mkdir -p gvcf

    gatk --java-options "-Xmx4g" \
        HaplotypeCaller \
        --reference "$FASTA" \
        --input "$bam" \
        --output "$outgvcf" \
        --dbsnp "$hapmapvcf" \
        --intervals "$hapmapvcf" \
        --alleles "$hapmapvcf" \
        --output-mode EMIT_ALL_CONFIDENT_SITES \
        -ERC GVCF

One this is done, run GATK CombineGVCFs and GenotypeGVCFs

    gatk --java-options "-Xmx4g" \
        CombineGVCFs \
        --reference "$FASTA" \
        --variant gvcf/<sample_name1>.g.vcf \
        --variant gvcf/<sample_name2>.g.vcf \
        --variant gvcf/<sample_name3>.g.vcf \
        --variant gvcf/<sample_name4>.g.vcf \
        --output gvcf/cohort.g.vcf.gz
        
    mkdir -p vcf
        
    gatk --java-options "-Xmx4g" \
        GenotypeGVCFs \
        --reference "$FASTA" \
        --dbsnp $hapmapvcf" \
        --intervals $hapmapvcf" \
        --variant gvcf/cohort.g.vcf.gz \
        --output vcf/cohort.vcf.gz

These commands genotype HapMap Phase II SNPs.

Next, run vcf2linkdatagen.pl to convert variant calls from VCF to BRLMM format. The BRLMM file will contain a column of SNP IDs followed by a column of genotypes for each individual. Genotypes will be coded 0 for AA, 1 for AB, 2 for BB or -1 for missing. A is the alphabetically lowest allele and B the alphabetically highest allele on the plus strand, i.e. for a C/T SNP 0=CC and 2=TT.

    LDGPATH=/path/to/linkdatagen/directory
    perl "$LDGPATH/vcf2linkdatagen.pl" \
        -variantCaller haplotypeCaller \
        -annotfile "$LINKDATAGEN_annotation/annotHapMap2U_hg38.txt" \
        -pop CEU \
        -mindepth 10 \
        -missingness 0 \
        vcf/cohort.vcf.gz \
        > cohort.brlmm

`-mindepth 10` specifies that a SNP's genotypes should only be printed if the SNP location has a minimum read depth (coverage) of ten high-quality reads.

`-pop CEU` specifiesthat CEU population frequencies should be used. These are the default settings.

The `-missingness` argument specifies the maximum proportion of missing genotype calls for a SNP to be output to the BRLMM file. `-missingness 0` specifies that only SNPs with non-missing genotypes for all samples should be printed to the BRLMM file. The default is `-missingness 1`, meaning that any amount of missingness is allowed.

Type `vcf2linkdatagen.pl -help` or see @sec-vcf2linkdatagenpl to learn more about these and other options.

Create a pedigree file and a whichsamples file for `linkdatagen.pl`. The whichsamples file consists of a single line of space-separated numbers; the *k*th number indicates the column number of the BRLMM file that contains genotypes for the individual specified in the *k*th row of your pedigree file. The first column of genotypes in the BRLMM file is column 1. Refer to the `linkdatagen.pl` documentation in @sec-linkdatagenpl for more detail. An example whichsamples file `cohort.ws` looks like:

    1 2 3 4 5 0 0 0 0 0 0

With ped file `cohort.ped` (tab separated):

```
cohort	5	1	2	1	2
cohort	6	10	8	1	2
cohort	7	10	8	2	2
cohort	8	5	11	2	2
cohort	9	5	11	1	2
cohort	1	0	0	1	0
cohort	2	0	0	2	0
cohort	3	1	2	1	0
cohort	4	0	0	2	1
cohort	10	0	0	1	1
cohort	11	0	0	2	1
```

Only individuals 5 to 9 have MPS data.
A diagram of this pedigree file is given here:
```{r, warning=FALSE, message=FALSE, echo=FALSE}
library(kinship2)
cohort <- read.delim("example_files/cohort.ped", header=FALSE)
ped <- with(cohort, purrr::quietly(pedigree)(V2, V3, V4, V5, ifelse(V6 == 0, NA, V6 - 1)))$result
plot(ped)
```


You are now ready to run `linkdatagen.pl` to create input files for linkage analysis. Here is an example command that will generate MERLIN (see <http://www.sph.umich.edu/csg/abecasis/merlin/download/>) input files.

    perl "$LDGPATH/linkdatagen.pl" \
        -data m \
        -pedfile cohort.ped \
        -whichSamplesFile cohort.ws \
        -callFile cohort.brlmm \
        -annotFile $LINKDATAGEN_annotation/annotHapMap2U_hg38.txt \
        -pop CEU \
        -binsize 0.3 \
        -MendelErrors removeSNPs \
        -removeWFHBS \
        -prog me \
        -outputDir cohort


`linkdatagen.pl` can create input files for many other programs, e.g. ALLEGRO. 
Refer to @sec-linkdatagenpl for further details concerning the `-prog` option and other options available.

You may wish to specify the `-removeWFHBS` option, which requests that uninformative SNPs '
(those for which all samples within a family have identical homozygous genotypes) are discarded. 
This should not be done if you only have genotypes from affected samples. 
Refer to @sec-wfhbsMarkers Within/whole-family homozygosity-by-state ("uninformative") markers' in the linkdatagen.pl documentation for further details.

If you are performing parametric linkage analysis, don't forget to create a file `param.tbl` specifying the genetic model (see <http://www.sph.umich.edu/csg/abecasis/merlin/tour/parametric.html>). 
You are now ready to perform linkage analysis using MERLIN:

```
cd cohort_merlin
for runfile in *in;
do
  bash $runfile
done

```
